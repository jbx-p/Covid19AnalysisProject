# -*- coding: utf-8 -*-
"""covid19Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tP7qlUeXf6t-xM8ls5iAQd8z9tmdVVjC

# **Covid Analysis Project Using Python**

## Overview

COVID-19, caused by the SARS-CoV-2 virus, is an infectious ailment characterized by a range of respiratory symptoms. While many individuals experience mild to moderate manifestations and recuperate without specialized care, some may develop severe complications requiring medical intervention. Vulnerable populations, such as the elderly or those with pre-existing health conditions like cardiovascular ailments or diabetes, face an increased risk of severe illness. However, COVID-19 can affect individuals of any age, potentially leading to serious outcomes.

To mitigate transmission, it is essential to stay informed about the disease's characteristics and transmission mechanisms. Measures such as maintaining physical distance, wearing masks correctly, and practicing regular hand hygiene significantly reduce the risk of infection. Vaccination, following local health guidelines, and adhering to respiratory etiquette—such as covering coughs and sneezes—also play crucial roles in preventing the spread of the virus.

COVID-19 primarily spreads through respiratory droplets or aerosols emitted when an infected person coughs, sneezes, speaks, sings, or breathes. Adhering to respiratory hygiene practices and promptly isolating oneself if feeling unwell are essential precautions to limit transmission.

##  Importing Libraries
"""

#Data Processing
import pandas as pd
import numpy as np

#Data Visulaisation
import plotly.express as px

#Machine Learning Libraries
import sklearn
from sklearn import linear_model
from sklearn.utils import shuffle

#Miscellaneous
import os
import warnings
warnings.filterwarnings('ignore')

#Load the data
from google.colab import files
files.upload()

world =pd.read_csv('worldometer_data.csv')
india=pd.read_csv('covid_19_india.csv')
state=pd.read_csv("StatewiseTestingDetails.csv")
daily = pd.read_csv('nation_level_daily.csv')
vac_data = pd.read_csv('country_vaccinations.csv')
pop_data = pd.read_csv('worldometer_data.csv')
vac_manu = pd.read_csv('country_vaccinations_by_manufacturer.csv')
state_vac=pd.read_csv('covid_vaccine_statewise.csv')
daily_records=pd.read_csv('day_wise.csv')

"""# Data Cleaning
## Making the data more usable for working with it
"""

# For world Vaccination Dataset
usa_vac = vac_data[vac_data['country'] == 'United States']
uk_vac = vac_data[vac_data['country'] == 'United Kingdom']
ger_vac = vac_data[vac_data['country'] == 'Germany']
ita_vac = vac_data[vac_data['country'] == 'Italy']
fra_vac = vac_data[vac_data['country'] == 'France']
chi_vac = vac_data[vac_data['country'] == 'China']
rus_vac = vac_data[vac_data['country'] == 'Russia']
isr_vac = vac_data[vac_data['country'] == 'Israel']
uae_vac = vac_data[vac_data['country'] == 'United Arab Emirates']
can_vac = vac_data[vac_data['country'] == 'Canada']
jpn_vac = vac_data[vac_data['country'] == 'Japan']
ind_vac = vac_data[vac_data['country'] == 'India']
ino_vac = vac_data[vac_data['country'] == 'Indonesia']
mal_vac = vac_data[vac_data['country'] == 'Malaysia']
ban_vac = vac_data[vac_data['country'] == 'Bangladesh']
nig_vac = vac_data[vac_data['country'] == 'Nigeria']
phi_vac = vac_data[vac_data['country'] == 'Phillipines']
vie_vac = vac_data[vac_data['country'] == 'Vietnam']
egy_vac = vac_data[vac_data['country'] == 'Egypt']
pak_vac = vac_data[vac_data['country'] == 'Pakistan']
usa_vac.drop(usa_vac[usa_vac['daily_vaccinations'].isnull()].index, inplace=True)
uk_vac.drop(uk_vac[uk_vac['daily_vaccinations'].isnull()].index, inplace=True)
ger_vac.drop(ger_vac[ger_vac['daily_vaccinations'].isnull()].index, inplace=True)
ita_vac.drop(ita_vac[ita_vac['daily_vaccinations'].isnull()].index, inplace=True)
fra_vac.drop(fra_vac[fra_vac['daily_vaccinations'].isnull()].index, inplace=True)
chi_vac.drop(chi_vac[chi_vac['daily_vaccinations'].isnull()].index, inplace=True)
rus_vac.drop(rus_vac[rus_vac['daily_vaccinations'].isnull()].index, inplace=True)
isr_vac.drop(isr_vac[isr_vac['daily_vaccinations'].isnull()].index, inplace=True)
uae_vac.drop(uae_vac[uae_vac['daily_vaccinations'].isnull()].index, inplace=True)
can_vac.drop(can_vac[can_vac['daily_vaccinations'].isnull()].index, inplace=True)
jpn_vac.drop(jpn_vac[jpn_vac['daily_vaccinations'].isnull()].index, inplace=True)
ind_vac.drop(ind_vac[ind_vac['daily_vaccinations'].isnull()].index, inplace=True)
ino_vac.drop(ino_vac[ino_vac['daily_vaccinations'].isnull()].index, inplace=True)
mal_vac.drop(mal_vac[mal_vac['daily_vaccinations'].isnull()].index, inplace=True)
ban_vac.drop(ban_vac[ban_vac['daily_vaccinations'].isnull()].index, inplace=True)
nig_vac.drop(nig_vac[nig_vac['daily_vaccinations'].isnull()].index, inplace=True)
phi_vac.drop(phi_vac[phi_vac['daily_vaccinations'].isnull()].index, inplace=True)
vie_vac.drop(vie_vac[vie_vac['daily_vaccinations'].isnull()].index, inplace=True)
egy_vac.drop(egy_vac[egy_vac['daily_vaccinations'].isnull()].index, inplace=True)
pak_vac.drop(pak_vac[pak_vac['daily_vaccinations'].isnull()].index, inplace=True)

#For Indian Vaccination Dataset
df2=state_vac
df2 = df2.rename(columns= {'Updated On':'Date','Total Doses Administered':'TotalDoses','Male(Individuals Vaccinated)':'Male','Female(Individuals Vaccinated)':'Female', 'Total Individuals Vaccinated':'TotalVaccinated',' Covaxin (Doses Administered)':'Covaxin','CoviShield (Doses Administered)':'CoviShield','Sputnik V (Doses Administered)':'Sputnik'})
df2.Date = pd.to_datetime(df2.Date, format="%d/%m/%Y")
df3=india
df1=state
df2 = df2[df2['State'] !='India']
df2 = df2.rename(columns= {'Updated On':'Date','Total Doses Administered':'TotalDoses','Male(Individuals Vaccinated)':'Male','Female(Individuals Vaccinated)':'Female', 'Total Individuals Vaccinated':'TotalVaccinated',' Covaxin (Doses Administered)':'Covaxin','CoviShield (Doses Administered)':'CoviShield','Sputnik V (Doses Administered)':'Sputnik'})
df2.Date = pd.to_datetime(df2.Date, format="%d/%m/%Y")
df2_2=df2[df2['Date']=="2021-08-9"]
df2_2.dropna()
df2_1 = df3[df3['Date']=='2021-08-11']

"""# Data Visualization

## World Dataset
"""

features=['TotalCases','TotalDeaths','TotalRecovered','ActiveCases']
for i in features:
    fig=px.treemap(world.iloc[0:25],
               values=i,
               path=['Country/Region'],
               template='plotly_dark',
               title="Tree Map depicting Impact of Covid-19 w.r.t {}".format(i))
    fig.show()

px.line(daily_records,
       x='Date',
       y=['Confirmed', 'Deaths', 'Recovered','Active'],
       template='plotly_dark',
       title='Daily trends of Covid-19 cases',
       labels={'Date':'Month','value':'Statistics'})

fig2=px.bar(world.iloc[0:20][::-1],
      y='Country/Region',
      x=['TotalCases','TotalRecovered', 'ActiveCases','TotalDeaths','Serious,Critical'],
      template='plotly_dark',
      title='Severly Hit Countries')
fig2.update_xaxes(tickangle=270)
fig2.show()

px.pie(world.iloc[0:20],
       names='Country/Region',
       values='TotalCases',
      template='plotly_dark',
      title='Distribution of Total Cases ')

"""## Indian Dataset"""

from plotly.subplots import make_subplots
import plotly.graph_objects as go

grouped_data=pd.read_csv('covid_19_india.csv')
grouped_data.head()

def country_visualisations(df,country):
    data_group=df[df['Country/Region']==country]
    data=data_group.loc[:,['Date','Confirmed','Deaths','Recovered','Active']]
    figure1=make_subplots(rows=1,cols=4,subplot_titles=('Confirmed','Active','Recovered','Deaths'))

    figure1.add_trace(go.Scatter(name='Confirmed',x=data['Date'],y=data['Confirmed']),row=1,col=1)

    figure1.add_trace(go.Scatter(name='Active',x=data['Date'],y=data['Active']),row=1,col=2)

    figure1.add_trace(go.Scatter(name='Recovered',x=data['Date'],y=data['Recovered']),row=1,col=3)

    figure1.add_trace(go.Scatter(name='Deaths',x=data['Date'],y=data['Deaths']),row=1,col=4)

    figure1.update_layout(height=500,
                         width=2000,
                         title_text='Recorded Cases in {}'.format(country),
                         template='plotly_dark')
    figure1.show()

"""## World Vaccination Situation"""

fig = go.Figure()
fig.add_trace(go.Scatter(x=usa_vac['date'], y=usa_vac['daily_vaccinations'], mode='lines+markers', name='USA'))
fig.add_trace(go.Scatter(x=uk_vac['date'],y=uk_vac['daily_vaccinations'], mode='lines+markers', name='UK'))
fig.add_trace(go.Scatter(x=ger_vac['date'],y=ger_vac['daily_vaccinations'], mode='lines+markers', name='Germany'))
fig.add_trace(go.Scatter(x=ind_vac['date'],y=ind_vac['daily_vaccinations'], mode='lines+markers', name='India'))
fig.update_layout(title='Comparison of Daily Vaccinations' , template='plotly_dark' )
fig.show()

"""## Indian Vs Pakistan (And China)
### Not Cricket but Vaccinations  
"""

fig = go.Figure()
fig.add_trace(go.Scatter(x=ind_vac['date'],y=ind_vac['daily_vaccinations'], mode='lines+markers', name='India'))
fig.add_trace(go.Scatter(x=chi_vac['date'],y=chi_vac['daily_vaccinations'], mode='lines+markers', name='China'))
fig.add_trace(go.Scatter(x=pak_vac['date'],y=pak_vac['daily_vaccinations'], mode='lines+markers', name='Pakistan'))
fig.update_layout(title='Comparison of Daily Vaccinations' , template='plotly_dark')
fig.show()

"""## Pakistan may have won the cricket match but they did not win at vaccinations per day

## Indian Situation

### Testing Situation In India
"""

state.Date = pd.to_datetime(state.Date, format="%Y/%m/%d")
fig = px.line(state, x='Date', y='TotalSamples', color='State', title='Total number of samples collected for Covid-19 testing(Statewise)' , template="plotly_dark")

fig.show()

"""### Result of Testing

"""

fig = px.bar(df2_1, x='State/UnionTerritory', y=['Confirmed','Cured','Deaths'], template="plotly_dark")
fig.update_layout(xaxis={'categoryorder':'total descending'})
fig.show()

"""### Indian Vaccination Status"""

fig = px.bar(df2_2, x='State', y='TotalDoses',title='Total Doses (Jan-Aug)',template="plotly_dark")
fig.update_traces(textposition='outside')
fig.update_layout(xaxis={'categoryorder':'total descending'})
fig.update_xaxes(tickfont=dict(size=14))
fig.update_yaxes(tickfont=dict(size=14))
fig.show()

fig = px.bar(df2_2, x="State", y=["Covaxin", "CoviShield",'TotalDoses'], template="plotly_dark")

fig.update_layout(barmode='stack',legend_orientation="h",legend=dict(x= 0.3, y=1.0),
                  xaxis={'categoryorder':'total descending'},
                 title_text='<b>Covid-19 Total Vaccinations in India according to type of vaccine<b>',
                  title_x=0.5,
                  width= 1100,
                  height= 500
                 )
fig.update_xaxes(tickfont=dict(size=14))
fig.update_yaxes(tickfont=dict(size=14))
fig.show()

"""# Machine Learning Part

## Attempt At Linear Regression
"""

from sklearn import model_selection
from sklearn.linear_model import LinearRegression
df2_1=df2_1[df2_1['State/UnionTerritory']!='Maharashtra']
states_clubbed=df2_1[["Confirmed","Cured","Deaths"]]
predict="Deaths"
X=np.array(states_clubbed.drop(predict,1))
y=np.array(states_clubbed[predict])
X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=0.25)
linear = LinearRegression()
linear.fit(X_train,y_train)
Y_pred = linear.predict(X_test)
print(linear.score(X_test, y_test))
print(linear.score(X_train,y_train))

df2_1
fig = px.scatter(df2_1, x='Cured', y='Deaths', template="plotly_dark")
fig.show()